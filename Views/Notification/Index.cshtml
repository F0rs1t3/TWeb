@model List<TWeb.Models.Notification>

@{
    ViewData["Title"] = "Notifications";
}

<div class="container">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1><i class="fas fa-bell"></i> Notifications</h1>
                @if (Model.Any(n => !n.IsRead))
                {
                    <button class="btn btn-outline-primary" onclick="markAllAsRead()">
                        <i class="fas fa-check-double"></i> Mark All as Read
                    </button>
                }
            </div>

            @if (Model.Any())
            {
                <div class="list-group">
                    @foreach (var notification in Model)
                    {
                        <div class="list-group-item @(notification.IsRead ? "" : "list-group-item-primary")">
                            <div class="d-flex w-100 justify-content-between align-items-start">
                                <div class="flex-grow-1">
                                    <div class="d-flex align-items-center mb-2">
                                        <i class="fas @GetNotificationIcon(notification.Type) me-2"></i>
                                        <h6 class="mb-0">@notification.Title</h6>
                                        @if (!notification.IsRead)
                                        {
                                            <span class="badge bg-primary ms-2">New</span>
                                        }
                                    </div>
                                    <p class="mb-2">@notification.Message</p>
                                    <small class="text-muted">@notification.CreatedAt.ToString("MMM dd, yyyy HH:mm")</small>
                                </div>
                                <div class="ms-3">
                                    @if (!string.IsNullOrEmpty(notification.ActionUrl))
                                    {
                                        <a href="@notification.ActionUrl" class="btn btn-sm btn-outline-primary me-2">
                                            <i class="fas fa-external-link-alt"></i> View
                                        </a>
                                    }
                                    @if (!notification.IsRead)
                                    {
                                        <button class="btn btn-sm btn-outline-success me-2" onclick="markAsRead(@notification.Id)">
                                            <i class="fas fa-check"></i>
                                        </button>
                                    }
                                    <form asp-action="Delete" asp-route-id="@notification.Id" method="post" class="d-inline">
                                        <button type="submit" class="btn btn-sm btn-outline-danger" onclick="return confirm('Delete this notification?')">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </form>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="text-center py-5">
                    <i class="fas fa-bell-slash fa-3x text-muted mb-3"></i>
                    <h3>No notifications</h3>
                    <p class="text-muted">You're all caught up! New notifications will appear here.</p>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        async function markAsRead(notificationId) {
            try {
                const formData = new FormData();
                formData.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]').value);
                
                const response = await fetch(`/Notification/MarkAsRead/${notificationId}`, {
                    method: 'POST',
                    body: formData
                });
                
                const result = await response.json();
                if (result.success) {
                    location.reload();
                }
            } catch (error) {
                console.error('Error marking notification as read:', error);
            }
        }
        
        async function markAllAsRead() {
            try {
                const formData = new FormData();
                formData.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]').value);
                
                const response = await fetch('/Notification/MarkAllAsRead', {
                    method: 'POST',
                    body: formData
                });
                
                const result = await response.json();
                if (result.success) {
                    location.reload();
                }
            } catch (error) {
                console.error('Error marking all notifications as read:', error);
            }
        }
    </script>
}

@functions {
    string GetNotificationIcon(NotificationType type)
    {
        return type switch
        {
            NotificationType.NewMessage => "fa-comment",
            NotificationType.NewChatRequest => "fa-comments",
            NotificationType.RentalRequest => "fa-calendar-alt",
            NotificationType.RentalConfirmed => "fa-check-circle",
            NotificationType.RentalCancelled => "fa-times-circle",
            _ => "fa-bell"
        };
    }
}