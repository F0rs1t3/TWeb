@model TWeb.Models.ViewModels.ChatViewModel

@{
    ViewData["Title"] = $"Chat about {Model.CarTitle}";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <!-- Chat Header -->
            <div class="card mb-3">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <a asp-action="Index" class="btn btn-outline-secondary me-3">
                            <i class="fas fa-arrow-left"></i> Back
                        </a>
                        
                        @if (!string.IsNullOrEmpty(Model.CarPhotoPath))
                        {
                            <img src="~/@Model.CarPhotoPath" alt="@Model.CarTitle" class="rounded me-3" style="width: 50px; height: 50px; object-fit: cover;">
                        }
                        else
                        {
                            <div class="bg-light rounded me-3 d-flex align-items-center justify-content-center" style="width: 50px; height: 50px;">
                                <i class="fas fa-car text-muted"></i>
                            </div>
                        }
                        
                        <div class="flex-grow-1">
                            <h5 class="mb-0">@Model.CarTitle</h5>
                            <p class="text-muted small mb-0">
                                Chat with @Model.OtherUserName
                                @if (Model.IsOwner)
                                {
                                    <span class="badge bg-success ms-1">You are the owner</span>
                                }
                            </p>
                        </div>
                        
                        <a asp-controller="Cars" asp-action="Details" asp-route-id="@Model.CarId" class="btn btn-outline-primary">
                            <i class="fas fa-eye"></i> View Car
                        </a>
                    </div>
                </div>
            </div>

            <!-- Chat Messages -->
            <div class="card">
                <div class="card-body p-0">
                    <div id="chatMessages" class="chat-messages" style="height: 500px; overflow-y: auto; padding: 20px;">
                        @foreach (var message in Model.Messages)
                        {
                            <div class="message-container mb-3 @(message.IsCurrentUser ? "text-end" : "text-start")">
                                <div class="message @(message.IsCurrentUser ? "message-sent" : "message-received")">
                                    @if (!message.IsCurrentUser)
                                    {
                                        <div class="message-sender">@message.SenderName</div>
                                    }
                                    <div class="message-content">@message.Message</div>
                                    <div class="message-time">@message.SentAt.ToString("MMM dd, HH:mm")</div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
                
                <div class="card-footer">
                    <form id="messageForm" class="d-flex">
                        <input type="hidden" id="chatId" value="@Model.ChatId" />
                        <div class="flex-grow-1 me-2">
                            <input type="text" id="messageInput" class="form-control" placeholder="Type your message..." maxlength="1000" required />
                        </div>
                        <button type="submit" class="btn btn-primary" id="sendButton">
                            <i class="fas fa-paper-plane"></i> Send
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .chat-messages {
            background-color: #f8f9fa;
        }
        
        .message-container {
            max-width: 70%;
        }
        
        .message-container.text-end {
            margin-left: auto;
        }
        
        .message-container.text-start {
            margin-right: auto;
        }
        
        .message {
            display: inline-block;
            padding: 12px 16px;
            border-radius: 18px;
            max-width: 100%;
            word-wrap: break-word;
        }
        
        .message-sent {
            background-color: #007bff;
            color: white;
        }
        
        .message-received {
            background-color: white;
            border: 1px solid #dee2e6;
            color: #333;
        }
        
        .message-sender {
            font-size: 0.75rem;
            font-weight: 600;
            margin-bottom: 4px;
            color: #6c757d;
        }
        
        .message-content {
            margin-bottom: 4px;
        }
        
        .message-time {
            font-size: 0.7rem;
            opacity: 0.7;
        }
        
        .message-sent .message-time {
            color: rgba(255, 255, 255, 0.8);
        }
        
        .message-received .message-time {
            color: #6c757d;
        }
    </style>
}

@section Scripts {
    <script>
        let chatId = @Model.ChatId;
        let isPolling = false;
        let lastMessageId = @(Model.Messages.Any() ? Model.Messages.Last().Id : 0);
        
        // Auto-scroll to bottom
        function scrollToBottom() {
            const chatMessages = document.getElementById('chatMessages');
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }
        
        // Send message
        document.getElementById('messageForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const messageInput = document.getElementById('messageInput');
            const sendButton = document.getElementById('sendButton');
            const message = messageInput.value.trim();
            
            if (!message) return;
            
            // Disable form
            messageInput.disabled = true;
            sendButton.disabled = true;
            
            try {
                const formData = new FormData();
                formData.append('ChatId', chatId);
                formData.append('Message', message);
                formData.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]').value);
                
                const response = await fetch('/Chat/SendMessage', {
                    method: 'POST',
                    body: formData
                });
                
                const result = await response.json();
                
                if (result.success) {
                    messageInput.value = '';
                    // Add message to UI immediately
                    addMessageToUI({
                        senderName: 'You',
                        message: message,
                        sentAt: new Date().toISOString(),
                        isCurrentUser: true
                    });
                    scrollToBottom();
                } else {
                    alert('Failed to send message: ' + (result.message || 'Unknown error'));
                }
            } catch (error) {
                console.error('Error sending message:', error);
                alert('Failed to send message. Please try again.');
            } finally {
                // Re-enable form
                messageInput.disabled = false;
                sendButton.disabled = false;
                messageInput.focus();
            }
        });
        
        // Add message to UI
        function addMessageToUI(message) {
            const chatMessages = document.getElementById('chatMessages');
            const messageContainer = document.createElement('div');
            messageContainer.className = `message-container mb-3 ${message.isCurrentUser ? 'text-end' : 'text-start'}`;
            
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${message.isCurrentUser ? 'message-sent' : 'message-received'}`;
            
            let messageHtml = '';
            if (!message.isCurrentUser) {
                messageHtml += `<div class="message-sender">${message.senderName}</div>`;
            }
            messageHtml += `<div class="message-content">${message.message}</div>`;
            messageHtml += `<div class="message-time">${formatMessageTime(message.sentAt)}</div>`;
            
            messageDiv.innerHTML = messageHtml;
            messageContainer.appendChild(messageDiv);
            chatMessages.appendChild(messageContainer);
        }
        
        // Format message time
        function formatMessageTime(dateString) {
            const date = new Date(dateString);
            return date.toLocaleDateString('en-US', { 
                month: 'short', 
                day: 'numeric', 
                hour: '2-digit', 
                minute: '2-digit' 
            });
        }
        
        // Poll for new messages
        async function pollMessages() {
            if (isPolling) return;
            isPolling = true;
            
            try {
                const response = await fetch(`/Chat/Messages/${chatId}`);
                const result = await response.json();
                
                if (result.success && result.messages) {
                    const newMessages = result.messages.filter(m => m.id > lastMessageId);
                    
                    newMessages.forEach(message => {
                        if (!message.isCurrentUser) {
                            addMessageToUI(message);
                        }
                        lastMessageId = Math.max(lastMessageId, message.id);
                    });
                    
                    if (newMessages.length > 0) {
                        scrollToBottom();
                    }
                }
            } catch (error) {
                console.error('Error polling messages:', error);
            } finally {
                isPolling = false;
            }
        }
        
        // Start polling when page loads
        document.addEventListener('DOMContentLoaded', function() {
            scrollToBottom();
            
            // Poll every 3 seconds
            setInterval(pollMessages, 3000);
            
            // Focus on message input
            document.getElementById('messageInput').focus();
        });
        
        // Handle Enter key
        document.getElementById('messageInput').addEventListener('keypress', function(e) {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                document.getElementById('messageForm').dispatchEvent(new Event('submit'));
            }
        });
    </script>
}